const cron = require('node-cron');
const notificationService = require('../services/notificationService');

class CronJobs {
  // Kh·ªüi ƒë·ªông t·∫•t c·∫£ cron jobs
  static start() {
    console.log('üïê Kh·ªüi ƒë·ªông cron jobs...');

    // T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü h√†ng ng√†y l√∫c 9:00 AM
    this.scheduleNotificationReminders();

    // Ki·ªÉm tra thi·∫øt b·ªã qu√° h·∫°n h√†ng ng√†y l√∫c 6:00 PM
    this.scheduleOverdueCheck();

    // G·ª≠i b√°o c√°o th·ªëng k√™ h√†ng tu·∫ßn (Ch·ªß nh·∫≠t 8:00 AM)
    this.scheduleWeeklyReport();

    // D·ªçn d·∫πp th√¥ng b√°o c≈© (m·ªói tu·∫ßn)
    this.scheduleNotificationCleanup();

    console.log('‚úÖ ƒê√£ kh·ªüi ƒë·ªông t·∫•t c·∫£ cron jobs');
  }

  // T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü h√†ng ng√†y l√∫c 9:00 AM
  static scheduleNotificationReminders() {
    cron.schedule('0 9 * * *', async () => {
      console.log('üì± B·∫Øt ƒë·∫ßu t·∫°o th√¥ng b√°o nh·∫Øc nh·ªü t·ª± ƒë·ªông...');
      
      try {
        const result = await notificationService.checkAndCreateDueDateReminders();
        
        if (result.success) {
          console.log(`‚úÖ ƒê√£ t·∫°o ${result.count} th√¥ng b√°o nh·∫Øc nh·ªü t·ª± ƒë·ªông`);
        } else {
          console.error('‚ùå L·ªói t·∫°o th√¥ng b√°o nh·∫Øc nh·ªü t·ª± ƒë·ªông:', result.error);
        }
      } catch (error) {
        console.error('‚ùå L·ªói cron job t·∫°o th√¥ng b√°o:', error.message);
      }
    }, {
      scheduled: true,
      timezone: "Asia/Ho_Chi_Minh"
    });

    console.log('‚è∞ ƒê√£ l√™n l·ªãch t·∫°o th√¥ng b√°o nh·∫Øc nh·ªü: 9:00 AM h√†ng ng√†y');
  }

  // Ki·ªÉm tra v√† t·∫°o th√¥ng b√°o qu√° h·∫°n l√∫c 6:00 PM
  static scheduleOverdueCheck() {
    cron.schedule('0 18 * * *', async () => {
      console.log('üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra thi·∫øt b·ªã qu√° h·∫°n...');
      
      try {
        const result = await notificationService.checkAndCreateOverdueNotifications();

        if (result.success) {
          console.log(`‚úÖ ƒê√£ t·∫°o ${result.count} th√¥ng b√°o qu√° h·∫°n`);
        } else {
          console.error('‚ùå L·ªói t·∫°o th√¥ng b√°o qu√° h·∫°n:', result.error);
        }

      } catch (error) {
        console.error('‚ùå L·ªói cron job ki·ªÉm tra qu√° h·∫°n:', error.message);
      }
    }, {
      scheduled: true,
      timezone: "Asia/Ho_Chi_Minh"
    });

    console.log('‚è∞ ƒê√£ l√™n l·ªãch ki·ªÉm tra qu√° h·∫°n: 6:00 PM h√†ng ng√†y');
  }

  // G·ª≠i b√°o c√°o th·ªëng k√™ h√†ng tu·∫ßn (Ch·ªß nh·∫≠t 8:00 AM)
  static scheduleWeeklyReport() {
    cron.schedule('0 8 * * 0', async () => {
      console.log('üìä B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o th·ªëng k√™ tu·∫ßn...');
      
      try {
        const statisticsService = require('../services/statisticsService');
        const currentDate = new Date();
        const currentYear = currentDate.getFullYear();
        const currentMonth = currentDate.getMonth() + 1;

        // L·∫•y th·ªëng k√™ th√°ng hi·ªán t·∫°i
        const [equipmentStats, overview] = await Promise.all([
          statisticsService.getMostBorrowedEquipmentInMonth(currentYear, currentMonth),
          statisticsService.getMonthlyOverview(currentYear, currentMonth)
        ]);

        // G·ª≠i email b√°o c√°o (c√≥ th·ªÉ implement sau)
        console.log('üìà Th·ªëng k√™ tu·∫ßn:', {
          mostBorrowedCount: equipmentStats.statistics.length,
          totalRequests: overview.overview.totalRequests
        });

      } catch (error) {
        console.error('‚ùå L·ªói t·∫°o b√°o c√°o th·ªëng k√™ tu·∫ßn:', error.message);
      }
    }, {
      scheduled: true,
      timezone: "Asia/Ho_Chi_Minh"
    });

    console.log('‚è∞ ƒê√£ l√™n l·ªãch b√°o c√°o tu·∫ßn: 8:00 AM Ch·ªß nh·∫≠t');
  }

  // D·ªçn d·∫πp th√¥ng b√°o c≈© (m·ªói tu·∫ßn)
  static scheduleNotificationCleanup() {
    cron.schedule('0 2 * * 0', async () => {
      console.log('üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp th√¥ng b√°o c≈©...');
      
      try {
        const Notification = require('../models/Notification');
        
        // X√≥a th√¥ng b√°o ƒë√£ ƒë·ªçc > 7 ng√†y
        const weekAgo = new Date();
        weekAgo.setDate(weekAgo.getDate() - 7);
        
        const result = await Notification.deleteMany({
          isRead: true,
          readAt: { $lt: weekAgo }
        });

        console.log(`üóëÔ∏è ƒê√£ x√≥a ${result.deletedCount} th√¥ng b√°o c≈©`);

      } catch (error) {
        console.error('‚ùå L·ªói d·ªçn d·∫πp th√¥ng b√°o:', error.message);
      }
    }, {
      scheduled: true,
      timezone: "Asia/Ho_Chi_Minh"
    });

    console.log('‚è∞ ƒê√£ l√™n l·ªãch d·ªçn d·∫πp th√¥ng b√°o: 2:00 AM Ch·ªß nh·∫≠t');
  }
}

module.exports = CronJobs; 