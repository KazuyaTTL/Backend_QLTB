const Notification = require('../models/Notification');
const BorrowRequest = require('../models/BorrowRequest');

class NotificationService {
  // T·∫°o th√¥ng b√°o khi request ƒë∆∞·ª£c ch·∫•p nh·∫≠n
  async createRequestApprovedNotification(borrowRequest) {
    try {
      const equipment = await require('../models/Equipment').findById(
        borrowRequest.equipments[0].equipment
      );

      return await Notification.createNotification({
        recipient: borrowRequest.borrower,
        title: '‚úÖ Y√™u c·∫ßu m∆∞·ª£n ƒë∆∞·ª£c ch·∫•p nh·∫≠n',
        message: `Y√™u c·∫ßu m∆∞·ª£n "${equipment.name}" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n. Vui l√≤ng ƒë·∫øn nh·∫≠n thi·∫øt b·ªã theo th·ªùi gian ƒë√£ h·∫πn.`,
        type: 'request_approved',
        priority: 'high',
        relatedRequest: borrowRequest._id,
        relatedEquipment: equipment._id,
        data: {
          equipmentName: equipment.name,
          borrowDate: borrowRequest.borrowDate,
          expectedReturnDate: borrowRequest.expectedReturnDate
        }
      });
    } catch (error) {
      console.error('L·ªói t·∫°o th√¥ng b√°o ch·∫•p nh·∫≠n:', error.message);
    }
  }

  // T·∫°o th√¥ng b√°o khi request b·ªã t·ª´ ch·ªëi
  async createRequestRejectedNotification(borrowRequest, reason) {
    try {
      const equipment = await require('../models/Equipment').findById(
        borrowRequest.equipments[0].equipment
      );

      return await Notification.createNotification({
        recipient: borrowRequest.borrower,
        title: '‚ùå Y√™u c·∫ßu m∆∞·ª£n b·ªã t·ª´ ch·ªëi',
        message: `Y√™u c·∫ßu m∆∞·ª£n "${equipment.name}" c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi. L√Ω do: ${reason}`,
        type: 'request_rejected',
        priority: 'normal',
        relatedRequest: borrowRequest._id,
        relatedEquipment: equipment._id,
        data: {
          equipmentName: equipment.name,
          rejectionReason: reason
        }
      });
    } catch (error) {
      console.error('L·ªói t·∫°o th√¥ng b√°o t·ª´ ch·ªëi:', error.message);
    }
  }

  // T·∫°o th√¥ng b√°o khi m∆∞·ª£n th√†nh c√¥ng
  async createBorrowSuccessNotification(borrowRequest) {
    try {
      const equipment = await require('../models/Equipment').findById(
        borrowRequest.equipments[0].equipment
      );

      return await Notification.createNotification({
        recipient: borrowRequest.borrower,
        title: 'üì¶ ƒê√£ nh·∫≠n thi·∫øt b·ªã th√†nh c√¥ng',
        message: `B·∫°n ƒë√£ nh·∫≠n "${equipment.name}" th√†nh c√¥ng. Vui l√≤ng tr·∫£ ƒë√∫ng h·∫°n v√†o ng√†y ${new Date(borrowRequest.expectedReturnDate).toLocaleDateString('vi-VN')}.`,
        type: 'borrow_success',
        priority: 'normal',
        relatedRequest: borrowRequest._id,
        relatedEquipment: equipment._id,
        data: {
          equipmentName: equipment.name,
          dueDate: borrowRequest.expectedReturnDate
        }
      });
    } catch (error) {
      console.error('L·ªói t·∫°o th√¥ng b√°o m∆∞·ª£n th√†nh c√¥ng:', error.message);
    }
  }

  // T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü tr·∫£ thi·∫øt b·ªã
  async createReturnReminderNotification(borrowRequest, daysLeft) {
    try {
      const equipment = await require('../models/Equipment').findById(
        borrowRequest.equipments[0].equipment
      );

      const urgency = daysLeft <= 1 ? 'urgent' : 'high';
      const icon = daysLeft <= 1 ? 'üö®' : '‚è∞';
      const title = daysLeft <= 1 ? 
        `${icon} KH·∫®N C·∫§P: S·∫Øp qu√° h·∫°n tr·∫£ thi·∫øt b·ªã` : 
        `${icon} Nh·∫Øc nh·ªü: S·∫Øp ƒë·∫øn h·∫°n tr·∫£ thi·∫øt b·ªã`;

      return await Notification.createNotification({
        recipient: borrowRequest.borrower,
        title: title,
        message: `Thi·∫øt b·ªã "${equipment.name}" s·∫Ω h·∫øt h·∫°n trong ${daysLeft} ng√†y (${new Date(borrowRequest.expectedReturnDate).toLocaleDateString('vi-VN')}). Vui l√≤ng chu·∫©n b·ªã tr·∫£ ƒë√∫ng h·∫°n.`,
        type: 'return_reminder',
        priority: urgency,
        relatedRequest: borrowRequest._id,
        relatedEquipment: equipment._id,
        data: {
          equipmentName: equipment.name,
          daysLeft: daysLeft,
          dueDate: borrowRequest.expectedReturnDate
        }
      });
    } catch (error) {
      console.error('L·ªói t·∫°o th√¥ng b√°o nh·∫Øc nh·ªü:', error.message);
    }
  }

  // T·∫°o th√¥ng b√°o qu√° h·∫°n
  async createOverdueNotification(borrowRequest, daysOverdue) {
    try {
      const equipment = await require('../models/Equipment').findById(
        borrowRequest.equipments[0].equipment
      );

      return await Notification.createNotification({
        recipient: borrowRequest.borrower,
        title: 'üö® THI·∫æT B·ªä ƒê√É QU√Å H·∫†N',
        message: `Thi·∫øt b·ªã "${equipment.name}" ƒë√£ qu√° h·∫°n ${daysOverdue} ng√†y (h·∫°n tr·∫£: ${new Date(borrowRequest.expectedReturnDate).toLocaleDateString('vi-VN')}). Vui l√≤ng tr·∫£ ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh b·ªã x·ª≠ l√Ω k·ª∑ lu·∫≠t.`,
        type: 'return_overdue',
        priority: 'urgent',
        relatedRequest: borrowRequest._id,
        relatedEquipment: equipment._id,
        data: {
          equipmentName: equipment.name,
          daysOverdue: daysOverdue,
          dueDate: borrowRequest.expectedReturnDate
        }
      });
    } catch (error) {
      console.error('L·ªói t·∫°o th√¥ng b√°o qu√° h·∫°n:', error.message);
    }
  }

  // T·∫°o th√¥ng b√°o tr·∫£ th√†nh c√¥ng
  async createReturnSuccessNotification(borrowRequest) {
    try {
      const equipment = await require('../models/Equipment').findById(
        borrowRequest.equipments[0].equipment
      );

      return await Notification.createNotification({
        recipient: borrowRequest.borrower,
        title: '‚úÖ ƒê√£ tr·∫£ thi·∫øt b·ªã th√†nh c√¥ng',
        message: `B·∫°n ƒë√£ tr·∫£ "${equipment.name}" th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng thi·∫øt b·ªã ƒë√∫ng quy ƒë·ªãnh.`,
        type: 'return_success',
        priority: 'normal',
        relatedRequest: borrowRequest._id,
        relatedEquipment: equipment._id,
        data: {
          equipmentName: equipment.name,
          returnDate: new Date()
        }
      });
    } catch (error) {
      console.error('L·ªói t·∫°o th√¥ng b√°o tr·∫£ th√†nh c√¥ng:', error.message);
    }
  }

  // Ki·ªÉm tra v√† t·∫°o th√¥ng b√°o cho thi·∫øt b·ªã s·∫Øp h·∫øt h·∫°n
  async checkAndCreateDueDateReminders() {
    try {
      const now = new Date();
      const threeDaysLater = new Date(now.getTime() + (3 * 24 * 60 * 60 * 1000));
      const oneDayLater = new Date(now.getTime() + (24 * 60 * 60 * 1000));

      // T√¨m c√°c request s·∫Øp h·∫øt h·∫°n
      const dueSoonRequests = await BorrowRequest.find({
        status: 'borrowed',
        expectedReturnDate: {
          $gte: now,
          $lte: threeDaysLater
        }
      }).populate('borrower', 'name email');

      let notificationCount = 0;

      for (const request of dueSoonRequests) {
        const daysLeft = Math.ceil((request.expectedReturnDate - now) / (24 * 60 * 60 * 1000));
        
        // Ch·ªâ g·ª≠i th√¥ng b√°o cho 1 v√† 3 ng√†y
        if (daysLeft === 1 || daysLeft === 3) {
          // Ki·ªÉm tra ƒë√£ g·ª≠i th√¥ng b√°o ch∆∞a
          const existingNotification = await Notification.findOne({
            recipient: request.borrower._id,
            relatedRequest: request._id,
            type: 'return_reminder',
            createdAt: {
              $gte: new Date(now.getTime() - (24 * 60 * 60 * 1000)) // Trong 24h qua
            }
          });

          if (!existingNotification) {
            await this.createReturnReminderNotification(request, daysLeft);
            notificationCount++;
          }
        }
      }

      console.log(`üì± ƒê√£ t·∫°o ${notificationCount} th√¥ng b√°o nh·∫Øc nh·ªü`);
      return { success: true, count: notificationCount };

    } catch (error) {
      console.error('L·ªói ki·ªÉm tra th√¥ng b√°o nh·∫Øc nh·ªü:', error.message);
      return { success: false, error: error.message };
    }
  }

  // Ki·ªÉm tra v√† t·∫°o th√¥ng b√°o qu√° h·∫°n
  async checkAndCreateOverdueNotifications() {
    try {
      const now = new Date();

      // T√¨m c√°c request ƒë√£ qu√° h·∫°n
      const overdueRequests = await BorrowRequest.find({
        status: 'borrowed',
        expectedReturnDate: { $lt: now }
      }).populate('borrower', 'name email');

      let notificationCount = 0;

      for (const request of overdueRequests) {
        const daysOverdue = Math.ceil((now - request.expectedReturnDate) / (24 * 60 * 60 * 1000));
        
        // Ki·ªÉm tra ƒë√£ g·ª≠i th√¥ng b√°o qu√° h·∫°n ch∆∞a
        const existingNotification = await Notification.findOne({
          recipient: request.borrower._id,
          relatedRequest: request._id,
          type: 'return_overdue',
          createdAt: {
            $gte: new Date(now.getTime() - (24 * 60 * 60 * 1000)) // Trong 24h qua
          }
        });

        if (!existingNotification) {
          await this.createOverdueNotification(request, daysOverdue);
          notificationCount++;
        }
      }

      console.log(`üì± ƒê√£ t·∫°o ${notificationCount} th√¥ng b√°o qu√° h·∫°n`);
      return { success: true, count: notificationCount };

    } catch (error) {
      console.error('L·ªói ki·ªÉm tra th√¥ng b√°o qu√° h·∫°n:', error.message);
      return { success: false, error: error.message };
    }
  }

  // T·∫°o th√¥ng b√°o chung cho t·∫•t c·∫£ users
  async createGeneralNotification(title, message, priority = 'normal') {
    try {
      const User = require('../models/User');
      const users = await User.find({ role: 'student' });

      const notifications = users.map(user => ({
        recipient: user._id,
        title: title,
        message: message,
        type: 'general',
        priority: priority
      }));

      const result = await Notification.insertMany(notifications);
      console.log(`üì¢ ƒê√£ t·∫°o ${result.length} th√¥ng b√°o chung`);
      return result;

    } catch (error) {
      console.error('L·ªói t·∫°o th√¥ng b√°o chung:', error.message);
    }
  }
}

module.exports = new NotificationService(); 