const statisticsService = require('../services/statisticsService');
const emailService = require('../services/emailService');

// L·∫•y th·ªëng k√™ thi·∫øt b·ªã m∆∞·ª£n nhi·ªÅu nh·∫•t trong th√°ng
exports.getMostBorrowedEquipment = async (req, res) => {
  try {
    const { year, month } = req.query;
    
    // Validation
    const currentDate = new Date();
    const targetYear = year ? parseInt(year) : currentDate.getFullYear();
    const targetMonth = month ? parseInt(month) : currentDate.getMonth() + 1;

    if (targetMonth < 1 || targetMonth > 12) {
      return res.status(400).json({
        status: 'error',
        message: 'Th√°ng ph·∫£i t·ª´ 1 ƒë·∫øn 12'
      });
    }

    if (targetYear < 2020 || targetYear > currentDate.getFullYear() + 1) {
      return res.status(400).json({
        status: 'error',
        message: 'NƒÉm kh√¥ng h·ª£p l·ªá'
      });
    }

    const statistics = await statisticsService.getMostBorrowedEquipmentInMonth(targetYear, targetMonth);

    res.status(200).json({
      status: 'success',
      message: 'L·∫•y th·ªëng k√™ thi·∫øt b·ªã m∆∞·ª£n nhi·ªÅu nh·∫•t th√†nh c√¥ng',
      data: statistics
    });

  } catch (error) {
    console.error('L·ªói l·∫•y th·ªëng k√™ thi·∫øt b·ªã:', error);
    res.status(500).json({
      status: 'error',
      message: error.message || 'L·ªói server khi l·∫•y th·ªëng k√™'
    });
  }
};

// L·∫•y t·ªïng quan th·ªëng k√™ th√°ng
exports.getMonthlyOverview = async (req, res) => {
  try {
    const { year, month } = req.query;
    
    const currentDate = new Date();
    const targetYear = year ? parseInt(year) : currentDate.getFullYear();
    const targetMonth = month ? parseInt(month) : currentDate.getMonth() + 1;

    const overview = await statisticsService.getMonthlyOverview(targetYear, targetMonth);

    res.status(200).json({
      status: 'success',
      message: 'L·∫•y t·ªïng quan th·ªëng k√™ th√†nh c√¥ng',
      data: overview
    });

  } catch (error) {
    console.error('L·ªói l·∫•y t·ªïng quan th·ªëng k√™:', error);
    res.status(500).json({
      status: 'error',
      message: error.message || 'L·ªói server khi l·∫•y t·ªïng quan th·ªëng k√™'
    });
  }
};

// L·∫•y th·ªëng k√™ hi·ªán t·∫°i (th√°ng n√†y)
exports.getCurrentStatistics = async (req, res) => {
  try {
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth() + 1;

    // L·∫•y c·∫£ th·ªëng k√™ thi·∫øt b·ªã v√† t·ªïng quan
    const [equipmentStats, overview] = await Promise.all([
      statisticsService.getMostBorrowedEquipmentInMonth(currentYear, currentMonth),
      statisticsService.getMonthlyOverview(currentYear, currentMonth)
    ]);

    res.status(200).json({
      status: 'success',
      message: 'L·∫•y th·ªëng k√™ hi·ªán t·∫°i th√†nh c√¥ng',
      data: {
        currentMonth: currentMonth,
        currentYear: currentYear,
        mostBorrowedEquipment: equipmentStats.statistics,
        overview: overview.overview
      }
    });

  } catch (error) {
    console.error('L·ªói l·∫•y th·ªëng k√™ hi·ªán t·∫°i:', error);
    res.status(500).json({
      status: 'error',
      message: error.message || 'L·ªói server khi l·∫•y th·ªëng k√™ hi·ªán t·∫°i'
    });
  }
};

// So s√°nh th·ªëng k√™ gi·ªØa 2 th√°ng
exports.compareMonthlyStatistics = async (req, res) => {
  try {
    const { year1, month1, year2, month2 } = req.query;

    if (!year1 || !month1 || !year2 || !month2) {
      return res.status(400).json({
        status: 'error',
        message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin 2 th√°ng ƒë·ªÉ so s√°nh'
      });
    }

    const [stats1, stats2] = await Promise.all([
      statisticsService.getMostBorrowedEquipmentInMonth(parseInt(year1), parseInt(month1)),
      statisticsService.getMostBorrowedEquipmentInMonth(parseInt(year2), parseInt(month2))
    ]);

    res.status(200).json({
      status: 'success',
      message: 'So s√°nh th·ªëng k√™ th√†nh c√¥ng',
      data: {
        period1: stats1,
        period2: stats2
      }
    });

  } catch (error) {
    console.error('L·ªói so s√°nh th·ªëng k√™:', error);
    res.status(500).json({
      status: 'error',
      message: error.message || 'L·ªói server khi so s√°nh th·ªëng k√™'
    });
  }
};

// G·ª≠i c·∫£nh b√°o h·∫°n tr·∫£ th·ªß c√¥ng (Admin only)
exports.sendDueDateWarnings = async (req, res) => {
  try {
    console.log('üîÑ Admin triggered manual due date warnings...');
    
    // G·ªçi service ƒë·ªÉ ki·ªÉm tra v√† g·ª≠i c·∫£nh b√°o
    const result = await emailService.checkAndSendDueDateWarnings();
    
    res.status(200).json({
      status: 'success',
      message: 'G·ª≠i c·∫£nh b√°o h·∫°n tr·∫£ th√†nh c√¥ng',
      data: {
        totalWarningsSent: result.totalWarningsSent || 0,
        dueSoonWarnings: result.dueSoonWarnings || 0,
        overdueWarnings: result.overdueWarnings || 0,
        details: result.details || [],
        triggeredAt: new Date(),
        triggeredBy: req.user.fullName || req.user.email
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i c·∫£nh b√°o h·∫°n tr·∫£:', error);
    res.status(500).json({
      status: 'error',
      message: error.message || 'L·ªói server khi g·ª≠i c·∫£nh b√°o h·∫°n tr·∫£'
    });
  }
}; 