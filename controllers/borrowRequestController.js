const BorrowRequest = require('../models/BorrowRequest');
const User = require('../models/User');
const Equipment = require('../models/Equipment');
const notificationService = require('../services/notificationService');

// L·∫•y danh s√°ch requests (c√≥ filter c∆° b·∫£n)
const getBorrowRequests = async (req, res) => {
  try {
    const { status, page = 1, limit = 10 } = req.query;
    
    // Build filter
    const filter = {};
    if (status) filter.status = status;
    
    // N·∫øu l√† student th√¨ ch·ªâ xem requests c·ªßa m√¨nh
    if (req.user.role === 'student') {
      filter.borrower = req.user.id;
    }

    const skip = (page - 1) * limit;
    
    const requests = await BorrowRequest.find(filter)
      .populate('borrower', 'fullName email studentId')
      .populate('equipments.equipment', 'name code category')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    const total = await BorrowRequest.countDocuments(filter);

    res.json({
      success: true,
      data: requests,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(total / limit),
        total,
        limit: parseInt(limit)
      }
    });
  } catch (error) {
    console.error('Error getting borrow requests:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu m∆∞·ª£n',
      error: error.message
    });
  }
};

// T·∫°o y√™u c·∫ßu m∆∞·ª£n m·ªõi (v·ªõi borrow limits)
const createBorrowRequest = async (req, res) => {
  try {
    const { equipments, borrowDate, expectedReturnDate, purpose, notes } = req.body;
    const borrowerId = req.user.id;

    // Validation c∆° b·∫£n
    if (!equipments || equipments.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 thi·∫øt b·ªã'
      });
    }

    if (!borrowDate || !expectedReturnDate) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ch·ªçn ng√†y m∆∞·ª£n v√† ng√†y tr·∫£'
      });
    }

    if (!purpose || purpose.trim().length < 10) {
      return res.status(400).json({
        success: false,
        message: 'M·ª•c ƒë√≠ch s·ª≠ d·ª•ng ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±'
      });
    }

    // === KI·ªÇM TRA BORROW LIMITS ===
    console.log('üîç Checking borrow limits for user:', req.user.id);
    
    // L·∫•y th√¥ng tin user v·ªõi borrow tracking
    const borrower = await User.findById(borrowerId);
    if (!borrower) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng'
      });
    }

    // B·ªè restrictions ƒë√£ h·∫øt h·∫°n
    await borrower.removeExpiredRestrictions();

    // T√≠nh t·ªïng s·ªë l∆∞·ª£ng thi·∫øt b·ªã y√™u c·∫ßu
    const totalRequestQuantity = equipments.reduce((sum, item) => sum + item.quantity, 0);
    console.log(`üìä Current borrow count: ${borrower.currentBorrowCount}/${borrower.borrowLimit}`);
    console.log(`üì¶ Requesting: ${totalRequestQuantity} items`);

    // Ki·ªÉm tra c√≥ th·ªÉ t·∫°o request kh√¥ng (bao g·ªìm c·∫£ pending requests)
    const borrowCheck = await borrower.canCreateRequest(totalRequestQuantity);
    if (!borrowCheck.allowed) {
      console.log('‚ùå Borrow limit exceeded:', borrowCheck.reason);
      return res.status(400).json({
        success: false,
        message: borrowCheck.reason,
        details: {
          currentBorrowCount: borrower.currentBorrowCount,
          pendingCount: borrowCheck.pendingCount || 0,
          requestedCount: totalRequestQuantity,
          borrowLimit: borrower.borrowLimit,
          total: borrowCheck.total || borrower.currentBorrowCount + totalRequestQuantity,
          isRestricted: borrower.isRestricted,
          restrictions: borrowCheck.restrictions
        }
      });
    }

    console.log('‚úÖ Borrow limits OK:', {
      current: borrowCheck.currentCount,
      pending: borrowCheck.pendingCount,
      requested: borrowCheck.requestedCount,
      total: borrowCheck.total,
      limit: borrowCheck.limit,
      remaining: borrowCheck.remaining
    });

    // Ki·ªÉm tra equipment t·ªìn t·∫°i v√† ƒë·ªß s·ªë l∆∞·ª£ng
    for (const item of equipments) {
      console.log('üîç Checking equipment item:', item);
      
      const equipment = await Equipment.findById(item.equipment);
      console.log('üì¶ Found equipment:', equipment ? {
        id: equipment._id,
        name: equipment.name,
        availableQuantity: equipment.availableQuantity,
        borrowedQuantity: equipment.borrowedQuantity
      } : 'NOT FOUND');
      
      if (!equipment) {
        return res.status(404).json({
          success: false,
          message: `Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã v·ªõi ID: ${item.equipment}`
        });
      }

      if (equipment.availableQuantity < item.quantity) {
        return res.status(400).json({
          success: false,
          message: `Thi·∫øt b·ªã "${equipment.name}" kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng. C√≥ s·∫µn: ${equipment.availableQuantity}, y√™u c·∫ßu: ${item.quantity}`
        });
      }
    }

    // Generate request number
    console.log('üî¢ Generating request number...');
    const count = await BorrowRequest.countDocuments();
    const date = new Date();
    const year = date.getFullYear().toString().slice(-2);
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const requestNumber = `BR${year}${month}${(count + 1).toString().padStart(4, '0')}`;
    console.log('üî¢ Generated request number:', requestNumber);

    // T·∫°o request
    console.log('‚úÖ All validations passed. Creating BorrowRequest...');

    const borrowRequest = new BorrowRequest({
      requestNumber,
      borrower: borrowerId,
      equipments,
      borrowDate: new Date(borrowDate),
      expectedReturnDate: new Date(expectedReturnDate),
      purpose: purpose.trim(),
      notes: notes ? notes.trim() : '',
      status: 'pending'
    });

    console.log('üìù BorrowRequest object created:', {
      requestNumber: borrowRequest.requestNumber,
      borrower: borrowRequest.borrower,
      equipments: borrowRequest.equipments,
      status: borrowRequest.status,
      totalQuantity: totalRequestQuantity
    });

    console.log('üíæ Saving BorrowRequest...');
    await borrowRequest.save();
    console.log('‚úÖ BorrowRequest saved successfully');

    // Populate ƒë·ªÉ tr·∫£ v·ªÅ
    console.log('üîó Populating borrower...');
    await borrowRequest.populate('borrower', 'fullName email studentId currentBorrowCount borrowLimit');
    console.log('üîó Populating equipments...');
    await borrowRequest.populate('equipments.equipment', 'name code category');

    res.status(201).json({
      success: true,
      message: 'T·∫°o y√™u c·∫ßu m∆∞·ª£n th√†nh c√¥ng',
      data: borrowRequest,
      borrowStatus: {
        currentBorrowCount: borrower.currentBorrowCount,
        pendingCount: borrowCheck.pendingCount || 0,
        requestedCount: totalRequestQuantity,
        borrowLimit: borrower.borrowLimit,
        totalCommitted: borrowCheck.total,
        remainingSlots: borrowCheck.remaining
      }
    });
  } catch (error) {
    console.error('Error creating borrow request:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t·∫°o y√™u c·∫ßu m∆∞·ª£n',
      error: error.message
    });
  }
};

// Duy·ªát y√™u c·∫ßu (Admin only)
const approveBorrowRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const { notes } = req.body;

    const borrowRequest = await BorrowRequest.findById(id)
      .populate('equipments.equipment')
      .populate('borrower');

    if (!borrowRequest) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m∆∞·ª£n'
      });
    }

    if (borrowRequest.status !== 'pending') {
      return res.status(400).json({
        success: false,
        message: `Kh√¥ng th·ªÉ duy·ªát y√™u c·∫ßu c√≥ tr·∫°ng th√°i: ${borrowRequest.status}`
      });
    }

    // === KI·ªÇM TRA L·∫†I BORROW LIMITS KHI APPROVE ===
    const borrower = await User.findById(borrowRequest.borrower._id);
    await borrower.removeExpiredRestrictions();

    const totalRequestQuantity = borrowRequest.equipments.reduce((sum, item) => sum + item.quantity, 0);
    
    // Ki·ªÉm tra gi·ªõi h·∫°n ƒë∆°n gi·∫£n
    const borrowCheck = borrower.canBorrow(totalRequestQuantity);
    
    if (!borrowCheck.allowed) {
      console.log('‚ùå Borrow limit exceeded at approve time:', borrowCheck.reason);
      return res.status(400).json({
        success: false,
        message: `Kh√¥ng th·ªÉ duy·ªát: ${borrowCheck.reason}`,
        details: {
          currentBorrowCount: borrower.currentBorrowCount,
          borrowLimit: borrower.borrowLimit,
          isRestricted: borrower.isRestricted
        }
      });
    }

    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng thi·∫øt b·ªã
    for (const item of borrowRequest.equipments) {
      const equipment = await Equipment.findById(item.equipment._id);
      if (equipment.availableQuantity < item.quantity) {
        return res.status(400).json({
          success: false,
          message: `Thi·∫øt b·ªã "${equipment.name}" kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng ƒë·ªÉ cho m∆∞·ª£n. C√≥ s·∫µn: ${equipment.availableQuantity}, y√™u c·∫ßu: ${item.quantity}`
        });
      }
      
      // Tr·ª´ s·ªë l∆∞·ª£ng thi·∫øt b·ªã ngay khi approve
      equipment.availableQuantity -= item.quantity;
      equipment.borrowedQuantity += item.quantity;
      await equipment.save();
    }

    // === C·∫¨P NH·∫¨T BORROW COUNT C·ª¶A USER ===
    console.log(`üìä Updating borrow count: ${borrower.currentBorrowCount} + ${totalRequestQuantity}`);
    await borrower.updateBorrowCount(totalRequestQuantity, borrowRequest._id);
    console.log(`üìä New borrow count: ${borrower.currentBorrowCount + totalRequestQuantity}`);

    // Update status th√†nh borrowed lu√¥n (b·ªè qua approved)
    borrowRequest.status = 'borrowed';
    borrowRequest.reviewedBy = req.user.id;
    borrowRequest.reviewedAt = new Date();
    borrowRequest.reviewNotes = notes || '';
    borrowRequest.borrowedBy = req.user.id;
    borrowRequest.borrowedAt = new Date();

    await borrowRequest.save();

    await borrowRequest.populate('borrower', 'fullName email studentId currentBorrowCount borrowLimit');
    await borrowRequest.populate('equipments.equipment', 'name code category');

    // G·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng
    try {
      await notificationService.createBorrowSuccessNotification(borrowRequest);
      console.log('üì± ƒê√£ g·ª≠i th√¥ng b√°o duy·ªát y√™u c·∫ßu th√†nh c√¥ng');
    } catch (notifError) {
      console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o:', notifError.message);
    }

    res.json({
      success: true,
      message: 'Duy·ªát v√† cho m∆∞·ª£n thi·∫øt b·ªã th√†nh c√¥ng',
      data: borrowRequest,
      borrowStatus: {
        currentBorrowCount: borrower.currentBorrowCount + totalRequestQuantity,
        borrowLimit: borrower.borrowLimit,
        remainingSlots: borrower.borrowLimit - (borrower.currentBorrowCount + totalRequestQuantity)
      }
    });
  } catch (error) {
    console.error('Error approving borrow request:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi duy·ªát y√™u c·∫ßu',
      error: error.message
    });
  }
};

// T·ª´ ch·ªëi y√™u c·∫ßu (Admin only)
const rejectBorrowRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;

    if (!reason || reason.trim().length < 5) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi (√≠t nh·∫•t 5 k√Ω t·ª±)'
      });
    }

    const borrowRequest = await BorrowRequest.findById(id);
    if (!borrowRequest) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m∆∞·ª£n'
      });
    }

    if (borrowRequest.status !== 'pending') {
      return res.status(400).json({
        success: false,
        message: `Kh√¥ng th·ªÉ t·ª´ ch·ªëi y√™u c·∫ßu c√≥ tr·∫°ng th√°i: ${borrowRequest.status}`
      });
    }

    // Update status
    borrowRequest.status = 'rejected';
    borrowRequest.reviewedBy = req.user.id;
    borrowRequest.reviewedAt = new Date();
    borrowRequest.rejectionReason = reason.trim();

    await borrowRequest.save();

    await borrowRequest.populate('borrower', 'fullName email studentId');
    await borrowRequest.populate('equipments.equipment', 'name code category');

    // G·ª≠i th√¥ng b√°o t·ª´ ch·ªëi ƒë·∫øn ng∆∞·ªùi d√πng
    try {
      await notificationService.createRequestRejectedNotification(borrowRequest, reason.trim());
      console.log('üì± ƒê√£ g·ª≠i th√¥ng b√°o t·ª´ ch·ªëi y√™u c·∫ßu');
    } catch (notifError) {
      console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o:', notifError.message);
    }

    res.json({
      success: true,
      message: 'T·ª´ ch·ªëi y√™u c·∫ßu m∆∞·ª£n th√†nh c√¥ng',
      data: borrowRequest
    });
  } catch (error) {
    console.error('Error rejecting borrow request:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t·ª´ ch·ªëi y√™u c·∫ßu',
      error: error.message
    });
  }
};

// Cho m∆∞·ª£n thi·∫øt b·ªã (Admin only) 
const borrowEquipment = async (req, res) => {
  try {
    const { id } = req.params;

    const borrowRequest = await BorrowRequest.findById(id)
      .populate('equipments.equipment');

    if (!borrowRequest) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m∆∞·ª£n'
      });
    }

    if (borrowRequest.status !== 'approved') {
      return res.status(400).json({
        success: false,
        message: `Kh√¥ng th·ªÉ cho m∆∞·ª£n y√™u c·∫ßu c√≥ tr·∫°ng th√°i: ${borrowRequest.status}`
      });
    }

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng thi·∫øt b·ªã
    for (const item of borrowRequest.equipments) {
      const equipment = await Equipment.findById(item.equipment._id);
      if (equipment.availableQuantity < item.quantity) {
        return res.status(400).json({
          success: false,
          message: `Thi·∫øt b·ªã "${equipment.name}" kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng ƒë·ªÉ cho m∆∞·ª£n`
        });
      }
      
      equipment.availableQuantity -= item.quantity;
      equipment.borrowedQuantity += item.quantity;
      await equipment.save();
    }

    // Update request status
    borrowRequest.status = 'borrowed';
    borrowRequest.borrowedBy = req.user.id;
    borrowRequest.borrowedAt = new Date();

    await borrowRequest.save();

    await borrowRequest.populate('borrower', 'fullName email studentId');
    await borrowRequest.populate('equipments.equipment', 'name code category');

    res.json({
      success: true,
      message: 'Cho m∆∞·ª£n thi·∫øt b·ªã th√†nh c√¥ng',
      data: borrowRequest
    });
  } catch (error) {
    console.error('Error borrowing equipment:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi cho m∆∞·ª£n thi·∫øt b·ªã',
      error: error.message
    });
  }
};

// Tr·∫£ thi·∫øt b·ªã (Admin only)
const returnEquipment = async (req, res) => {
  try {
    const { id } = req.params;
    const { notes } = req.body;

    const borrowRequest = await BorrowRequest.findById(id)
      .populate('equipments.equipment')
      .populate('borrower');

    if (!borrowRequest) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m∆∞·ª£n'
      });
    }

    if (borrowRequest.status !== 'borrowed') {
      return res.status(400).json({
        success: false,
        message: `Kh√¥ng th·ªÉ tr·∫£ thi·∫øt b·ªã c√≥ tr·∫°ng th√°i: ${borrowRequest.status}`
      });
    }

    // === KI·ªÇM TRA QU√Å H·∫†N ===
    const now = new Date();
    const isOverdue = now > borrowRequest.expectedReturnDate;
    console.log(`üìÖ Expected return: ${borrowRequest.expectedReturnDate}, Now: ${now}, Overdue: ${isOverdue}`);

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng thi·∫øt b·ªã
    for (const item of borrowRequest.equipments) {
      const equipment = await Equipment.findById(item.equipment._id);
      equipment.availableQuantity += item.quantity;
      equipment.borrowedQuantity -= item.quantity;
      await equipment.save();
    }

    // === C·∫¨P NH·∫¨T BORROW COUNT C·ª¶A USER ===
    const borrower = await User.findById(borrowRequest.borrower._id);
    const totalReturnQuantity = borrowRequest.equipments.reduce((sum, item) => sum + item.quantity, 0);
    
    console.log(`üìä Updating borrow count: ${borrower.currentBorrowCount} - ${totalReturnQuantity}`);
    await borrower.updateBorrowCount(-totalReturnQuantity, borrowRequest._id);
    console.log(`üìä New borrow count: ${borrower.currentBorrowCount - totalReturnQuantity}`);

    // === X·ª¨ L√ù VI PH·∫†M QU√Å H·∫†N ===
    if (isOverdue) {
      console.log('‚ö†Ô∏è Overdue return detected, applying penalties...');
      await borrower.handleOverdue();
      
      // Th√™m v√†o borrowHistory v·ªõi action 'overdue'
      borrower.borrowHistory.push({
        requestId: borrowRequest._id,
        action: 'overdue',
        date: new Date(),
        equipmentCount: totalReturnQuantity
      });
      await borrower.save();
    }

    // Update request status
    borrowRequest.status = 'returned';
    borrowRequest.returnedBy = req.user.id;
    borrowRequest.returnedAt = new Date();
    borrowRequest.actualReturnDate = new Date();
    
    if (notes) {
      borrowRequest.notes = (borrowRequest.notes || '') + '\n--- Ghi ch√∫ khi tr·∫£ ---\n' + notes;
    }
    
    if (isOverdue) {
      const overdueDays = Math.ceil((now - borrowRequest.expectedReturnDate) / (1000 * 60 * 60 * 24));
      borrowRequest.notes = (borrowRequest.notes || '') + `\n--- C·∫¢NH B√ÅO ---\nTr·∫£ mu·ªôn ${overdueDays} ng√†y!`;
    }

    await borrowRequest.save();

    await borrowRequest.populate('borrower', 'fullName email studentId currentBorrowCount borrowLimit overdueCount');
    await borrowRequest.populate('equipments.equipment', 'name code category');

    // G·ª≠i th√¥ng b√°o tr·∫£ thi·∫øt b·ªã th√†nh c√¥ng
    try {
      await notificationService.createReturnSuccessNotification(borrowRequest);
      console.log('üì± ƒê√£ g·ª≠i th√¥ng b√°o tr·∫£ thi·∫øt b·ªã th√†nh c√¥ng');
    } catch (notifError) {
      console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o:', notifError.message);
    }

    res.json({
      success: true,
      message: isOverdue ? 
        `Nh·∫≠n tr·∫£ thi·∫øt b·ªã th√†nh c√¥ng (MU·ªòN ${Math.ceil((now - borrowRequest.expectedReturnDate) / (1000 * 60 * 60 * 24))} ng√†y)` : 
        'Nh·∫≠n tr·∫£ thi·∫øt b·ªã th√†nh c√¥ng',
      data: borrowRequest,
      borrowStatus: {
        currentBorrowCount: borrower.currentBorrowCount - totalReturnQuantity,
        borrowLimit: borrower.borrowLimit,
        remainingSlots: borrower.borrowLimit - (borrower.currentBorrowCount - totalReturnQuantity),
        overdueCount: isOverdue ? borrower.overdueCount + 1 : borrower.overdueCount,
        isOverdue: isOverdue
      },
      penalties: isOverdue ? {
        applied: true,
        newOverdueCount: borrower.overdueCount + 1,
        restrictions: borrower.borrowRestrictions.filter(r => !r.endDate || r.endDate > new Date())
      } : null
    });
  } catch (error) {
    console.error('Error returning equipment:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi tr·∫£ thi·∫øt b·ªã',
      error: error.message
    });
  }
};

// Th·ªëng k√™ ƒë∆°n gi·∫£n
const getStats = async (req, res) => {
  try {
    const stats = {
      total: await BorrowRequest.countDocuments(),
      pending: await BorrowRequest.countDocuments({ status: 'pending' }),
      approved: await BorrowRequest.countDocuments({ status: 'approved' }),
      borrowed: await BorrowRequest.countDocuments({ status: 'borrowed' }),
      returned: await BorrowRequest.countDocuments({ status: 'returned' }),
      rejected: await BorrowRequest.countDocuments({ status: 'rejected' })
    };

    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('Error getting stats:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th·ªëng k√™',
      error: error.message
    });
  }
};

// Xem t·ªïng quan pending requests c·ªßa user (Admin only)
const getUserPendingOverview = async (req, res) => {
  try {
    const { userId } = req.params;

    // L·∫•y th√¥ng tin user
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
      });
    }

    // L·∫•y t·∫•t c·∫£ pending requests c·ªßa user
    const pendingRequests = await BorrowRequest.find({
      borrower: userId,
      status: 'pending'
    })
    .populate('equipments.equipment', 'name code category')
    .sort({ createdAt: -1 });

    // T√≠nh t·ªïng s·ªë l∆∞·ª£ng thi·∫øt b·ªã trong pending requests
    const totalPendingQuantity = pendingRequests.reduce((total, request) => {
      return total + request.equipments.reduce((sum, item) => sum + item.quantity, 0);
    }, 0);

    // T√≠nh c√°c scenarios duy·ªát
    const scenarios = [];
    let currentCount = user.currentBorrowCount;
    
    for (let i = 0; i < pendingRequests.length; i++) {
      const request = pendingRequests[i];
      const requestQuantity = request.equipments.reduce((sum, item) => sum + item.quantity, 0);
      
      scenarios.push({
        requestId: request._id,
        requestNumber: request.requestNumber,
        quantity: requestQuantity,
        canApprove: (currentCount + requestQuantity) <= user.borrowLimit,
        newTotal: currentCount + requestQuantity,
        remainingSlots: user.borrowLimit - (currentCount + requestQuantity),
        equipments: request.equipments.map(item => ({
          name: item.equipment.name,
          code: item.equipment.code,
          quantity: item.quantity
        }))
      });
      
      // Gi·∫£ s·ª≠ approve request n√†y
      if ((currentCount + requestQuantity) <= user.borrowLimit) {
        currentCount += requestQuantity;
      }
    }

    res.json({
      success: true,
      data: {
        user: {
          _id: user._id,
          fullName: user.fullName,
          studentId: user.studentId,
          email: user.email,
          currentBorrowCount: user.currentBorrowCount,
          borrowLimit: user.borrowLimit,
          isRestricted: user.isRestricted
        },
        overview: {
          totalPendingRequests: pendingRequests.length,
          totalPendingQuantity: totalPendingQuantity,
          currentBorrowCount: user.currentBorrowCount,
          borrowLimit: user.borrowLimit,
          remainingSlots: user.borrowLimit - user.currentBorrowCount,
          wouldExceedLimit: (user.currentBorrowCount + totalPendingQuantity) > user.borrowLimit,
          excessQuantity: Math.max(0, (user.currentBorrowCount + totalPendingQuantity) - user.borrowLimit)
        },
        pendingRequests: pendingRequests,
        approvalScenarios: scenarios,
        recommendations: {
          canApproveAll: (user.currentBorrowCount + totalPendingQuantity) <= user.borrowLimit,
          maxApprovableRequests: scenarios.filter(s => s.canApprove).length,
          suggestedOrder: scenarios
            .filter(s => s.canApprove)
            .sort((a, b) => new Date(pendingRequests.find(r => r._id.toString() === a.requestId).createdAt) - 
                            new Date(pendingRequests.find(r => r._id.toString() === b.requestId).createdAt))
            .map(s => s.requestNumber)
        }
      }
    });
  } catch (error) {
    console.error('Error getting user pending overview:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y t·ªïng quan y√™u c·∫ßu pending',
      error: error.message
    });
  }
};

module.exports = {
  getBorrowRequests,
  createBorrowRequest,
  approveBorrowRequest,
  rejectBorrowRequest,
  borrowEquipment,
  returnEquipment,
  getStats,
  getUserPendingOverview
}; 