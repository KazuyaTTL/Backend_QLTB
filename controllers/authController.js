const User = require('../models/User');
const { generateTokenForUser } = require('../utils/jwt');

// ƒêƒÉng k√Ω t√†i kho·∫£n
const register = async (req, res) => {
  try {
    const { fullName, email, password, studentId, phone, faculty, class: className } = req.body;

    // CH·ªà CHO PH√âP ƒêƒÇNG K√ù T√ÄI KHO·∫¢N SINH VI√äN
    const role = 'student';

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({
        status: 'error',
        message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      });
    }

    // Ki·ªÉm tra studentId ƒë√£ t·ªìn t·∫°i (n·∫øu c√≥ studentId)
    if (studentId) {
      const existingStudent = await User.findOne({ studentId });
      if (existingStudent) {
        return res.status(400).json({
          status: 'error',
          message: 'M√£ sinh vi√™n ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
        });
      }
    }

    // T·∫°o user m·ªõi (ch·ªâ sinh vi√™n)
    const userData = {
      fullName,
      email,
      password,
      role: 'student'
    };

    // Th√™m th√¥ng tin sinh vi√™n n·∫øu c√≥
    if (studentId) userData.studentId = studentId;
    if (phone) userData.phone = phone;
    if (faculty) userData.faculty = faculty;
    if (className) userData.class = className;

    const user = await User.create(userData);

    // Generate token
    const token = generateTokenForUser(user);

    // Remove password from response
    const userResponse = user.toObject();
    delete userResponse.password;

    res.status(201).json({
      status: 'success',
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
      data: {
        user: userResponse,
        token
      }
    });

  } catch (error) {
    console.error('Register error:', error);
    res.status(500).json({
      status: 'error',
      message: 'L·ªói server khi ƒëƒÉng k√Ω'
    });
  }
};

// ƒêƒÉng nh·∫≠p
const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // üîç DEBUG LOGS
    console.log('üöÄ === LOGIN DEBUG ===');
    console.log('üìß Email nh·∫≠n ƒë∆∞·ª£c:', email);
    console.log('üîë Password nh·∫≠n ƒë∆∞·ª£c:', password);
    console.log('üì¶ Full body:', JSON.stringify(req.body, null, 2));
    console.log('üìã Headers:', JSON.stringify(req.headers, null, 2));

    // T√¨m user v√† include password ƒë·ªÉ so s√°nh
    const user = await User.findOne({ email }).select('+password');
    
    console.log('üë§ User t√¨m ƒë∆∞·ª£c:', user ? `${user.email} (${user._id})` : 'null');
    
    if (!user) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi email:', email);
      return res.status(401).json({
        status: 'error',
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
      });
    }

    // Ki·ªÉm tra t√†i kho·∫£n c√≥ ho·∫°t ƒë·ªông kh√¥ng
    if (!user.isActive) {
      console.log('‚ùå T√†i kho·∫£n b·ªã v√¥ hi·ªáu h√≥a');
      return res.status(401).json({
        status: 'error',
        message: 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    console.log('üîê B·∫Øt ƒë·∫ßu ki·ªÉm tra password...');
    const isPasswordMatch = await user.matchPassword(password);
    console.log('üîê K·∫øt qu·∫£ so s√°nh password:', isPasswordMatch);
    
    if (!isPasswordMatch) {
      console.log('‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp');
      return res.status(401).json({
        status: 'error',
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
      });
    }

    console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');

    // C·∫≠p nh·∫≠t th·ªùi gian ƒëƒÉng nh·∫≠p cu·ªëi
    await user.updateLastLogin();

    // Generate token
    const token = generateTokenForUser(user);

    // Remove password from response
    const userResponse = user.toObject();
    delete userResponse.password;

    res.json({
      status: 'success',
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: {
        user: userResponse,
        token
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      status: 'error',
      message: 'L·ªói server khi ƒëƒÉng nh·∫≠p'
    });
  }
};

// L·∫•y th√¥ng tin profile
const getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password');
    
    if (!user) {
      return res.status(404).json({
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng'
      });
    }

    res.json({
      status: 'success',
      data: {
        user
      }
    });

  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({
      status: 'error',
      message: 'L·ªói server khi l·∫•y th√¥ng tin profile'
    });
  }
};

// C·∫≠p nh·∫≠t profile
const updateProfile = async (req, res) => {
  try {
    const { fullName, phone, faculty, class: className } = req.body;
    
    const updateData = {};
    if (fullName !== undefined) updateData.fullName = fullName;
    if (phone !== undefined) updateData.phone = phone;
    
    // Ch·ªâ cho ph√©p sinh vi√™n c·∫≠p nh·∫≠t faculty v√† class
    if (req.user.role === 'student') {
      if (faculty !== undefined) updateData.faculty = faculty;
      if (className !== undefined) updateData.class = className;
    }

    const user = await User.findByIdAndUpdate(
      req.user._id,
      updateData,
      { new: true, runValidators: true }
    ).select('-password');

    if (!user) {
      return res.status(404).json({
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
      });
    }

    res.json({
      status: 'success',
      message: 'C·∫≠p nh·∫≠t profile th√†nh c√¥ng',
      data: {
        user
      }
    });

  } catch (error) {
    console.error('Update profile error:', error);
    res.status(500).json({
      status: 'error',
      message: 'L·ªói server khi c·∫≠p nh·∫≠t profile'
    });
  }
};

// ƒê·ªïi m·∫≠t kh·∫©u
const changePassword = async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;

    // T√¨m user v·ªõi password
    const user = await User.findById(req.user._id).select('+password');
    
    if (!user) {
      return res.status(404).json({
        status: 'error',
        message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
    const isCurrentPasswordValid = await user.matchPassword(currentPassword);
    if (!isCurrentPasswordValid) {
      return res.status(400).json({
        status: 'error',
        message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng'
      });
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = newPassword;
    await user.save();

    res.json({
      status: 'success',
      message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('Change password error:', error);
    res.status(500).json({
      status: 'error',
      message: 'L·ªói server khi ƒë·ªïi m·∫≠t kh·∫©u'
    });
  }
};

// Refresh token (gia h·∫°n token)
const refreshToken = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password');
    
    if (!user || !user.isActive) {
      return res.status(401).json({
        status: 'error',
        message: 'T√†i kho·∫£n kh√¥ng h·ª£p l·ªá'
      });
    }

    // Generate new token
    const token = generateTokenForUser(user);

    res.json({
      status: 'success',
      message: 'Token ƒë√£ ƒë∆∞·ª£c gia h·∫°n',
      data: {
        user,
        token
      }
    });

  } catch (error) {
    console.error('Refresh token error:', error);
    res.status(500).json({
      status: 'error',
      message: 'L·ªói server khi gia h·∫°n token'
    });
  }
};

// ƒêƒÉng xu·∫•t (client-side ch·ªâ c·∫ßn x√≥a token)
const logout = (req, res) => {
  res.json({
    status: 'success',
    message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
  });
};

// T·∫°o t√†i kho·∫£n Admin (ch·ªâ Admin hi·ªán t·∫°i m·ªõi ƒë∆∞·ª£c ph√©p)
const createAdminAccount = async (req, res) => {
  try {
    // Ki·ªÉm tra ng∆∞·ªùi g·ªçi API ph·∫£i l√† admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        status: 'error',
        message: 'Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn t·∫°o t√†i kho·∫£n Admin'
      });
    }

    const { fullName, email, password } = req.body;

    // Validation
    if (!fullName || !email || !password) {
      return res.status(400).json({
        status: 'error',
        message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin: H·ªç t√™n, Email, M·∫≠t kh·∫©u'
      });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({
        status: 'error',
        message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      });
    }

    // T·∫°o admin m·ªõi
    const adminData = {
      fullName,
      email,
      password,
      role: 'admin'
    };

    const newAdmin = await User.create(adminData);

    // Remove password from response
    const adminResponse = newAdmin.toObject();
    delete adminResponse.password;

    res.status(201).json({
      status: 'success',
      message: 'T·∫°o t√†i kho·∫£n Admin th√†nh c√¥ng',
      data: {
        admin: adminResponse,
        createdBy: req.user.fullName
      }
    });

  } catch (error) {
    console.error('Create admin error:', error);
    res.status(500).json({
      status: 'error',
      message: 'L·ªói server khi t·∫°o t√†i kho·∫£n Admin'
    });
  }
};

module.exports = {
  register,
  login,
  getProfile,
  updateProfile,
  changePassword,
  refreshToken,
  logout,
  createAdminAccount
}; 